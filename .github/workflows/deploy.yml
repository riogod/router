name: Deploy

on:
  # Деплой при push в master (только для release merges)
  push:
    branches: [master]
  # Возможность запуска вручную
  workflow_dispatch:
    inputs:
      version:
        description: 'Версия для деплоя (опционально, будет определена автоматически)'
        required: false
        type: string

jobs:
  # Проверяем, нужно ли делать деплой
  check-deploy:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      version: ${{ steps.check.outputs.version }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Нужно для сравнения коммитов
          
      - name: Check if deploy needed
        id: check
        run: |
          # Если запущено вручную
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION=$(node -p "require('./package.json').version")
            fi
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_prerelease=$(echo $VERSION | grep -q '-' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
            echo "🚀 Ручной запуск деплоя версии $VERSION"
            exit 0
          fi
          
          # Проверяем commit message для автоматического деплоя
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Commit message: $COMMIT_MSG"
          
          # Проверяем, является ли это мержем release ветки
          if echo "$COMMIT_MSG" | grep -qE "(Merge pull request .* from .*/release/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?|Merge branch 'release/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?'|Release v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)? \\(#[0-9]+\\))"; then
            echo "✅ Найден мерж release ветки - деплой нужен"
            
            # Извлекаем версию из commit message
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?" | head -1 | sed 's/^v//')
            
            if [ -z "$VERSION" ]; then
              # Если не удалось извлечь версию из коммита, берем из package.json
              VERSION=$(node -p "require('./package.json').version")
              echo "⚠️ Не удалось извлечь версию из коммита, используем версию из package.json: $VERSION"
            else
              echo "🎯 Извлечена версия из коммита: $VERSION"
            fi
            
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_prerelease=$(echo $VERSION | grep -q '-' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          else
            echo "❌ Это не мерж release ветки - деплой не нужен"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Основной деплой
  deploy:
    needs: check-deploy
    if: needs.check-deploy.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # Для npm provenance
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build packages
        run: npm run build
        
      - name: Security audit
        run: npm run audit:ci
        continue-on-error: true # Не блокируем деплой из-за аудита
        
      - name: Verify version consistency
        run: |
          EXPECTED_VERSION="${{ needs.check-deploy.outputs.version }}"
          echo "🔍 Проверяем версии пакетов..."
          
          # Проверяем все package.json файлы
          find packages -name "package.json" -exec sh -c '
            PACKAGE_VERSION=$(node -p "require(\"$1\").version")
            PACKAGE_NAME=$(node -p "require(\"$1\").name")
            echo "📦 $PACKAGE_NAME: $PACKAGE_VERSION"
            if [ "$PACKAGE_VERSION" != "'"$EXPECTED_VERSION"'" ]; then
              echo "❌ Версия пакета $PACKAGE_NAME ($PACKAGE_VERSION) не соответствует ожидаемой ('"$EXPECTED_VERSION"')"
              exit 1
            fi
          ' _ {} \;
          
          echo "✅ Все версии пакетов соответствуют ожидаемой: $EXPECTED_VERSION"
          
      - name: Publish to npm
        run: |
          echo "📦 Публикуем пакеты в npm..."
          
          # Публикуем каждый пакет
          for package_dir in packages/*/; do
            if [ -f "$package_dir/package.json" ]; then
              PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
              PACKAGE_VERSION=$(node -p "require('./$package_dir/package.json').version")
              
              echo "🚀 Публикуем $PACKAGE_NAME@$PACKAGE_VERSION..."
              
              cd "$package_dir"
              
              # Проверяем, не опубликована ли уже эта версия
              if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
                echo "⚠️ Версия $PACKAGE_NAME@$PACKAGE_VERSION уже опубликована, пропускаем"
              else
                # Определяем тег для публикации
                if [[ "$PACKAGE_VERSION" == *"-"* ]]; then
                  NPM_TAG="beta"
                else
                  NPM_TAG="latest"
                fi
                
                echo "📤 Публикуем с тегом: $NPM_TAG"
                npm publish --tag "$NPM_TAG" --provenance --access public
                echo "✅ $PACKAGE_NAME@$PACKAGE_VERSION опубликован"
              fi
              
              cd - > /dev/null
            fi
          done
          
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create/Update GitHub Release
        run: |
          VERSION="${{ needs.check-deploy.outputs.version }}"
          TAG_NAME="v$VERSION"
          IS_PRERELEASE="${{ needs.check-deploy.outputs.is_prerelease }}"
          
          echo "🎉 Обновляем GitHub Release: $TAG_NAME"
          
          # Проверяем, существует ли уже release (draft)
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "📝 Обновляем существующий draft release..."
            
            # Получаем текущие release notes
            CURRENT_NOTES=$(gh release view "$TAG_NAME" --json body -q .body)
            
            # Создаем временный файл для новых notes
            cat > /tmp/release_notes.md << 'EOF'
          $CURRENT_NOTES
          
          ## 🚀 Релиз опубликован!
          
          ✅ **Статус:** Опубликован  
          📦 **npm пакеты:** Опубликованы  
          🏷️ **Тег:** `$TAG_NAME`  
          📅 **Дата:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          
          ### 📦 Опубликованные пакеты:
          EOF
            
            # Добавляем список опубликованных пакетов
            for package_dir in packages/*/; do
              if [ -f "$package_dir/package.json" ]; then
                PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
                echo "- [\`$PACKAGE_NAME@$VERSION\`](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)" >> /tmp/release_notes.md
              fi
            done
            
            # Обновляем release (убираем draft статус)
            gh release edit "$TAG_NAME" \
              --notes-file /tmp/release_notes.md \
              --draft=false \
              --prerelease="$IS_PRERELEASE"
              
            echo "✅ Draft release обновлен и опубликован!"
            
          else
            echo "📝 Создаем новый release..."
            
            # Создаем временный файл для release notes
            cat > /tmp/release_notes.md << EOF
          ## 🚀 Release v$VERSION
          
          ### 📦 Опубликованные пакеты:
          EOF
            
            for package_dir in packages/*/; do
              if [ -f "$package_dir/package.json" ]; then
                PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
                echo "- [\`$PACKAGE_NAME@$VERSION\`](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)" >> /tmp/release_notes.md
              fi
            done
            
            cat >> /tmp/release_notes.md << EOF
          
          ---
          
          ✅ **Статус:** Опубликован  
          📅 **Дата:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          EOF
            
            # Создаем новый release
            gh release create "$TAG_NAME" \
              --title "🚀 Release v$VERSION" \
              --notes-file /tmp/release_notes.md \
              --prerelease="$IS_PRERELEASE"
              
            echo "✅ Новый release создан!"
          fi
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        run: |
          VERSION="${{ needs.check-deploy.outputs.version }}"
          echo "## 🎉 Деплой завершен!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Что опубликовано:" >> $GITHUB_STEP_SUMMARY
          echo "- **🏷️ Версия:** \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **📦 npm пакеты:** Опубликованы" >> $GITHUB_STEP_SUMMARY
          echo "- **🎉 GitHub Release:** [v$VERSION](https://github.com/${{ github.repository }}/releases/tag/v$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Опубликованные пакеты:" >> $GITHUB_STEP_SUMMARY
          
          for package_dir in packages/*/; do
            if [ -f "$package_dir/package.json" ]; then
              PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
              echo "- [\`$PACKAGE_NAME@$VERSION\`](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
            fi
          done 
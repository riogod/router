name: Deploy

on:
  # –î–µ–ø–ª–æ–π –ø—Ä–∏ push –≤ master (–ø–æ—Å–ª–µ –º–µ—Ä–∂–∞ PR)
  push:
    branches:
      - master
  
  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
  verify:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      is_release_merge: ${{ steps.check.outputs.is_release_merge }}
      target_version: ${{ steps.check.outputs.target_version }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –ù—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
          
      - name: Check if deployment needed and detect release merge
        id: check
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–µ—Ä–∂–µ–º –∏–∑ release –≤–µ—Ç–∫–∏
          MERGE_COMMIT_MSG="${{ github.event.head_commit.message }}"
          IS_RELEASE_MERGE="false"
          TARGET_VERSION=""
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω merge commit –∏–∑ release –≤–µ—Ç–∫–∏
          if echo "$MERGE_COMMIT_MSG" | grep -qE "Merge pull request .* from .*/release/v[0-9]+\.[0-9]+\.[0-9]+"; then
            IS_RELEASE_MERGE="true"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ commit message
            TARGET_VERSION=$(echo "$MERGE_COMMIT_MSG" | grep -oE "release/v[0-9]+\.[0-9]+\.[0-9]+[a-zA-Z0-9\-\.]*" | sed 's/release\/v//')
            echo "Detected release merge with target version: $TARGET_VERSION"
          elif echo "$MERGE_COMMIT_MSG" | grep -qE "Merge branch 'release/v[0-9]+\.[0-9]+\.[0-9]+"; then
            IS_RELEASE_MERGE="true"
            TARGET_VERSION=$(echo "$MERGE_COMMIT_MSG" | grep -oE "release/v[0-9]+\.[0-9]+\.[0-9]+[a-zA-Z0-9\-\.]*" | sed 's/release\/v//')
            echo "Detected direct release branch merge with target version: $TARGET_VERSION"
          fi
          
          echo "is_release_merge=$IS_RELEASE_MERGE" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ packages —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, deploying"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            CHANGES=$(git diff --name-only $LAST_TAG..HEAD | grep -E '^packages/' || true)
            if [ -n "$CHANGES" ]; then
              echo "Package changes detected since $LAST_TAG"
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "No package changes since $LAST_TAG"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          fi

  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
  test:
    needs: verify
    if: needs.verify.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run linting
        if: matrix.node-version == '20.x'
        run: npm run lint

  # –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π
  deploy:
    needs: [verify, test]
    if: needs.verify.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–æ–≤ –∏ —Ä–µ–ª–∏–∑–æ–≤
      packages: write # –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ GitHub Packages (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build
        
      - name: Determine version bump
        id: version
        run: |
          if [ "${{ needs.verify.outputs.is_release_merge }}" = "true" ]; then
            # –î–ª—è release merge –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏
            TARGET_VERSION="${{ needs.verify.outputs.target_version }}"
            echo "version_type=exact" >> $GITHUB_OUTPUT
            echo "exact_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
            echo "Will set exact version: $TARGET_VERSION"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "Will bump $VERSION_TYPE version"
          else
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–µ—Ä—Å–∏–∏ –ø–æ –∫–æ–º–º–∏—Ç–∞–º
            COMMITS=$(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD)
            
            if echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.+\))?!:"; then
              VERSION_TYPE="major"
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.+\))?:"; then
              VERSION_TYPE="minor"
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (fix|bugfix)(\(.+\))?:"; then
              VERSION_TYPE="patch"
            else
              VERSION_TYPE="patch"
            fi
            
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "Will bump $VERSION_TYPE version"
          fi
          
      - name: Release
        run: |
          if [ "${{ steps.version.outputs.version_type }}" = "exact" ]; then
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è release merge
            npm run release -- --ci --release-version=${{ steps.version.outputs.exact_version }}
          else
            # –û–±—ã—á–Ω—ã–π increment –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
            npm run release -- --ci --increment=${{ steps.version.outputs.version_type }}
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get new version
        id: new_version
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: Release v${{ steps.new_version.outputs.version }}
          body: |
            ## Changes in v${{ steps.new_version.outputs.version }}
            
            ### Commits
            ${{ github.event.head_commit.message }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.previous_version.outputs.version }}...v${{ steps.new_version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.new_version.outputs.version, '-') }}

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ
  notify-success:
    needs: [deploy]
    if: success()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify success
        run: |
          echo "üöÄ Deployment successful!"
          echo "Version: ${{ needs.deploy.outputs.version }}"
          
  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–µ–ø–ª–æ—è
  notify-failure:
    needs: [deploy]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå Deployment failed!"
          exit 1 
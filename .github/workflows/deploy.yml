name: Deploy

on:
  # Deploy on push to master (only for release merges)
  push:
    branches: [master]
  # Manual trigger option
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (optional, will be determined automatically)'
        required: false
        type: string

jobs:
  # Check if deploy is needed
  check-deploy:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      version: ${{ steps.check.outputs.version }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Needed for commit comparison
          
      - name: Check if deploy needed
        id: check
        run: |
          # If triggered manually
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION=$(node -p "require('./package.json').version")
            fi
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_prerelease=$(echo $VERSION | grep -q '-' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
            echo "🚀 Manual deploy trigger for version $VERSION"
            exit 0
          fi
          
          # Check commit message for automatic deploy
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Commit message: $COMMIT_MSG"
          
          # Check if this is a release branch merge or release commit
          if echo "$COMMIT_MSG" | grep -qE "(Merge pull request .* from .*/release/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?|Merge branch 'release/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?'|Release v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)? \\(#[0-9]+\\)|chore\\(release\\): bump version to [0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?)"; then
            echo "✅ Found release commit - deploy needed"
            
            # Extract version from commit message
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?" | head -1 | sed 's/^v//')
            
            if [ -z "$VERSION" ]; then
              # If couldn't extract version from commit, use package.json
              VERSION=$(node -p "require('./package.json').version")
              echo "⚠️ Could not extract version from commit, using package.json version: $VERSION"
            else
              echo "🎯 Extracted version from commit: $VERSION"
            fi
            
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_prerelease=$(echo $VERSION | grep -q '-' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          else
            echo "❌ Not a release commit - deploy not needed"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Main deploy job
  deploy:
    needs: check-deploy
    if: needs.check-deploy.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # For npm provenance
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build packages
        run: npm run build
        
      - name: Security audit
        run: npm run audit:ci
        continue-on-error: true # Don't block deploy due to audit
        
      - name: Verify version consistency
        run: |
          EXPECTED_VERSION="${{ needs.check-deploy.outputs.version }}"
          echo "🔍 Checking package versions..."
          
          # Check all package.json files
          find packages -name "package.json" -exec sh -c '
            PACKAGE_VERSION=$(node -p "require(\"$1\").version")
            PACKAGE_NAME=$(node -p "require(\"$1\").name")
            echo "📦 $PACKAGE_NAME: $PACKAGE_VERSION"
            if [ "$PACKAGE_VERSION" != "'"$EXPECTED_VERSION"'" ]; then
              echo "❌ Package version $PACKAGE_NAME ($PACKAGE_VERSION) does not match expected ('"$EXPECTED_VERSION"')"
              exit 1
            fi
          ' _ {} \;
          
          echo "✅ All package versions match expected: $EXPECTED_VERSION"
          
      - name: Publish to npm
        run: |
          echo "📦 Publishing packages to npm..."
          
          # Publish each package
          for package_dir in packages/*/; do
            if [ -f "$package_dir/package.json" ]; then
              PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
              PACKAGE_VERSION=$(node -p "require('./$package_dir/package.json').version")
              
              echo "🚀 Publishing $PACKAGE_NAME@$PACKAGE_VERSION..."
              
              cd "$package_dir"
              
              # Check if this version is already published
              if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
                echo "⚠️ Version $PACKAGE_NAME@$PACKAGE_VERSION already published, skipping"
              else
                # Determine tag for publishing
                if [[ "$PACKAGE_VERSION" == *"-"* ]]; then
                  NPM_TAG="beta"
                else
                  NPM_TAG="latest"
                fi
                
                echo "📤 Publishing with tag: $NPM_TAG"
                npm publish --tag "$NPM_TAG" --provenance --access public
                echo "✅ $PACKAGE_NAME@$PACKAGE_VERSION published"
              fi
              
              cd - > /dev/null
            fi
          done
          
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create/Update GitHub Release
        run: |
          VERSION="${{ needs.check-deploy.outputs.version }}"
          TAG_NAME="v$VERSION"
          IS_PRERELEASE="${{ needs.check-deploy.outputs.is_prerelease }}"
          
          echo "🎉 Updating GitHub Release: $TAG_NAME"
          
          # Generate complete changelog for this release
          echo "📋 Generating complete changelog for release..."
          
          # Get the previous tag for changelog generation
          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG_NAME^" 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "📊 Generating changelog from $PREV_TAG to $TAG_NAME..."
            # Generate changelog including all commits up to the tag (including release branch commits)
            CHANGELOG_CONTENT=$(node scripts/generate-changelog.js "$VERSION" "$PREV_TAG" --output=/tmp/temp_changelog.md --to-tag="$TAG_NAME")
          else
            echo "📊 Generating changelog for first release..."
            CHANGELOG_CONTENT=$(node scripts/generate-changelog.js "$VERSION" --output=/tmp/temp_changelog.md --to-tag="$TAG_NAME")
          fi
          
          # Check if release already exists (draft)
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "📝 Updating existing draft release..."
            
            # Get current release notes and clean them
            CURRENT_NOTES=$(gh release view "$TAG_NAME" --json body -q .body)
            
            # Remove draft warning from existing notes
            CLEANED_NOTES=$(echo "$CURRENT_NOTES" | sed '/> ⚠️ \*\*This is a draft release\.\*\*/d')
            
            # Create new release notes with complete changelog
            {
              # Add the cleaned original content (without draft warning)
              echo "$CLEANED_NOTES"
              echo ""
              echo "---"
              echo ""
              echo "## 🚀 Release Published!"
              echo ""
              echo "✅ **Status:** Published"
              echo "📦 **npm packages:** Published"
              echo "🏷️ **Tag:** \`$TAG_NAME\`"
              echo "📅 **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              echo ""
              echo "### 📦 Published packages:"
            } > /tmp/release_notes.md
            
            # Add list of published packages
            for package_dir in packages/*/; do
              if [ -f "$package_dir/package.json" ]; then
                PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
                echo "- [\`$PACKAGE_NAME@$VERSION\`](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)" >> /tmp/release_notes.md
              fi
            done
            
            # Update release (remove draft status)
            gh release edit "$TAG_NAME" \
              --notes-file /tmp/release_notes.md \
              --draft=false \
              --prerelease="$IS_PRERELEASE"
              
            echo "✅ Draft release updated and published!"
            
          else
            echo "📝 Creating new release..."
            
            # Read generated changelog content
            if [ -f "/tmp/temp_changelog.md" ]; then
              CHANGELOG_SECTION=$(cat /tmp/temp_changelog.md)
            else
              CHANGELOG_SECTION="### 📝 Other Changes\n\n- Updates and improvements"
            fi
            
            # Create complete release notes with changelog
            {
              echo "$CHANGELOG_SECTION"
              echo ""
              echo "---"
              echo ""
              echo "### 📦 Published packages:"
            } > /tmp/release_notes.md
            
            for package_dir in packages/*/; do
              if [ -f "$package_dir/package.json" ]; then
                PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
                echo "- [\`$PACKAGE_NAME@$VERSION\`](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)" >> /tmp/release_notes.md
              fi
            done
            
            {
              echo ""
              echo "---"
              echo ""
              echo "✅ **Status:** Published"
              echo "📅 **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            } >> /tmp/release_notes.md
            
            # Create new release
            gh release create "$TAG_NAME" \
              --title "🚀 Release v$VERSION" \
              --notes-file /tmp/release_notes.md \
              --prerelease="$IS_PRERELEASE"
              
            echo "✅ New release created!"
          fi
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        run: |
          VERSION="${{ needs.check-deploy.outputs.version }}"
          echo "## 🎉 Deploy completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 What was published:" >> $GITHUB_STEP_SUMMARY
          echo "- **🏷️ Version:** \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **📦 npm packages:** Published" >> $GITHUB_STEP_SUMMARY
          echo "- **🎉 GitHub Release:** [v$VERSION](https://github.com/${{ github.repository }}/releases/tag/v$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published packages:" >> $GITHUB_STEP_SUMMARY
          
          for package_dir in packages/*/; do
            if [ -f "$package_dir/package.json" ]; then
              PACKAGE_NAME=$(node -p "require('./$package_dir/package.json').name")
              echo "- [\`$PACKAGE_NAME@$VERSION\`](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
            fi
          done 
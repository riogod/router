name: Release Branch

on:
  # Pull requests –∏–∑ release –≤–µ—Ç–æ–∫
  pull_request:
    branches: 
      - master
    types: [opened, synchronize, reopened]

jobs:
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è release –≤–µ—Ç–∫–∞
  validate-release:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release/v')
    outputs:
      is_valid_release: ${{ steps.validate.outputs.is_valid_release }}
      target_version: ${{ steps.validate.outputs.target_version }}
      
    steps:
      - name: Validate release branch name
        id: validate
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Checking release branch: $BRANCH_NAME"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç release/vX.Y.Z –∏–ª–∏ release/vX.Y.Z-suffix
          if echo "$BRANCH_NAME" | grep -qE "^release/v[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$"; then
            TARGET_VERSION=$(echo "$BRANCH_NAME" | sed 's/release\/v//')
            echo "Valid release branch detected with version: $TARGET_VERSION"
            echo "is_valid_release=true" >> $GITHUB_OUTPUT
            echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Invalid release branch format. Expected: release/vX.Y.Z or release/vX.Y.Z-suffix"
            echo "is_valid_release=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è release –≤–µ—Ç–∫–∏
  test-release:
    needs: validate-release
    if: needs.validate-release.outputs.is_valid_release == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        
    name: Test Release (Node ${{ matrix.node-version }})
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run linting (Node 18 only)
        if: matrix.node-version == '18.x'
        run: npm run lint
        
      - name: Check TypeScript compilation
        if: matrix.node-version == '18.x'
        run: npx tsc --noEmit --project tsconfig.base.json

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è release
  build-release:
    needs: validate-release
    if: needs.validate-release.outputs.is_valid_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –≤ package.json
  version-check:
    needs: validate-release
    if: needs.validate-release.outputs.is_valid_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check version consistency
        run: |
          BRANCH_VERSION="${{ needs.validate-release.outputs.target_version }}"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "Branch version: $BRANCH_VERSION"
          echo "Package.json version: $PACKAGE_VERSION"
          
          # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
          if [ "$BRANCH_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "‚ö†Ô∏è Warning: Branch version ($BRANCH_VERSION) differs from package.json version ($PACKAGE_VERSION)"
            echo "The version will be automatically set to $BRANCH_VERSION when merged to master"
          else
            echo "‚úÖ Version consistency check passed"
          fi

  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–ª–∏–∑–µ
  pr-comment:
    needs: [validate-release, test-release, build-release, version-check]
    if: always() && needs.validate-release.outputs.is_valid_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const targetVersion = '${{ needs.validate-release.outputs.target_version }}';
            const testStatus = '${{ needs.test-release.result }}';
            const buildStatus = '${{ needs.build-release.result }}';
            
            const statusIcon = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                default: return '‚è≥';
              }
            };
            
            const body = `## üöÄ Release Branch: v${targetVersion}
            
            –≠—Ç–æ—Ç PR –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ª–∏–∑ –≤–µ—Ä—Å–∏–∏ **${targetVersion}**.
            
            ### –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–æ–∫:
            - ${statusIcon(testStatus)} –¢–µ—Å—Ç—ã: ${testStatus}
            - ${statusIcon(buildStatus)} –°–±–æ—Ä–∫–∞: ${buildStatus}
            
            ### –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –º–µ—Ä–∂–µ:
            1. –í–µ—Ä—Å–∏—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ **${targetVersion}**
            2. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–µ–≥ **v${targetVersion}**
            3. –ü–∞–∫–µ—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ npm
            4. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω GitHub Release
            
            ${testStatus === 'success' && buildStatus === 'success' 
              ? '‚úÖ **–ì–æ—Ç–æ–≤ –∫ –º–µ—Ä–∂—É!** –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.' 
              : '‚ö†Ô∏è **–ù–µ –≥–æ—Ç–æ–≤ –∫ –º–µ—Ä–∂—É.** –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –º–µ—Ä–∂–µ–º.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è release
  release-ready:
    needs: [validate-release, test-release, build-release, version-check]
    if: always() && needs.validate-release.outputs.is_valid_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check release readiness
        run: |
          if [[ "${{ needs.test-release.result }}" == "success" && "${{ needs.build-release.result }}" == "success" ]]; then
            echo "üöÄ Release v${{ needs.validate-release.outputs.target_version }} is ready for deployment!"
            exit 0
          else
            echo "‚ùå Release is not ready. Fix the issues before merging."
            exit 1
          fi 
name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: '–¢–∏–ø —Ä–µ–ª–∏–∑–∞'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–º–º–∏—Ç–∞–º
          - patch     # 0.0.1 ‚Üí 0.0.2 (–±–∞–≥—Ñ–∏–∫—Å—ã)
          - minor     # 0.1.0 ‚Üí 0.2.0 (–Ω–æ–≤—ã–µ —Ñ–∏—á–∏)
          - major     # 1.0.0 ‚Üí 2.0.0 (breaking changes)
          - prerelease # 0.1.0 ‚Üí 0.1.1-beta.1
      custom_version:
        description: '–ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0.0-beta.1)'
        required: false
        type: string
      release_notes:
        description: '–ó–∞–º–µ—Ç–∫–∏ –∫ —Ä–µ–ª–∏–∑—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –ù—É–∂–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–∏—Ç–æ–≤
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Determine new version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_type=custom" >> $GITHUB_OUTPUT
            echo "üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –≤–µ—Ä—Å–∏—é: $NEW_VERSION"
            exit 0
          fi
          
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
          if [ "$VERSION_TYPE" = "auto" ]; then
            echo "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞..."
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              COMMITS=$(git log $LAST_TAG..HEAD --oneline)
              echo "–ö–æ–º–º–∏—Ç—ã —Å $LAST_TAG:"
              echo "$COMMITS"
            else
              COMMITS=$(git log --oneline)
              echo "–í—Å–µ –∫–æ–º–º–∏—Ç—ã (–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–≥–æ–≤):"
              echo "$COMMITS"
            fi
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ –ø–æ conventional commits
            if echo "$COMMITS" | grep -qE "^[a-f0-9]+ [^:]+!:"; then
              VERSION_TYPE="major"
              echo "üö® –ù–∞–π–¥–µ–Ω—ã breaking changes ‚Üí MAJOR —Ä–µ–ª–∏–∑"
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ feat(\(.+\))?:"; then
              VERSION_TYPE="minor"
              echo "‚ú® –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ ‚Üí MINOR —Ä–µ–ª–∏–∑"
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ fix(\(.+\))?:"; then
              VERSION_TYPE="patch"
              echo "üêõ –ù–∞–π–¥–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üí PATCH —Ä–µ–ª–∏–∑"
            else
              VERSION_TYPE="patch"
              echo "üìù –î—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üí PATCH —Ä–µ–ª–∏–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            fi
          fi
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          
          # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏–∑ patch –≤–µ—Ä—Å–∏–∏
          patch=$(echo "$patch" | sed 's/-.*//')
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
            prerelease)
              # –î–ª—è prerelease –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
              if [[ "$CURRENT_VERSION" == *"-"* ]]; then
                # –£–∂–µ –µ—Å—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
                BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
                SUFFIX=$(echo "$CURRENT_VERSION" | cut -d'-' -f2)
                if [[ "$SUFFIX" == *"."* ]]; then
                  PREFIX=$(echo "$SUFFIX" | cut -d'.' -f1)
                  NUMBER=$(echo "$SUFFIX" | cut -d'.' -f2)
                  NEW_VERSION="$BASE_VERSION-$PREFIX.$((NUMBER + 1))"
                else
                  NEW_VERSION="$BASE_VERSION-$SUFFIX.1"
                fi
              else
                NEW_VERSION="$major.$minor.$((patch + 1))-beta.1"
              fi
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $CURRENT_VERSION ‚Üí $NEW_VERSION ($VERSION_TYPE)"

      - name: Create and push tag
        run: |
          TAG_NAME="v${{ steps.version.outputs.new_version }}"
          echo "üè∑Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–µ–≥: $TAG_NAME"
          
          # –°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          
          # –ü—É—à–∏–º —Ç–µ–≥
          git push origin "$TAG_NAME"
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
      - name: Create release branch
        run: |
          BRANCH_NAME="release/v${{ steps.version.outputs.new_version }}"
          echo "üìù –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É: $BRANCH_NAME"
          
          git checkout -b "$BRANCH_NAME"
          
          # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–∞—Ö
          echo "üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤..."
          node ./scripts/update-package-versions.js ${{ steps.version.outputs.new_version }}
          
          # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤–µ—Ä—Å–∏–π
          git add .
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.new_version }}"
          
          # –ü—É—à–∏–º –≤–µ—Ç–∫—É
          git push origin "$BRANCH_NAME"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog..."
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –¥–ª—è changelog
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD~1 --oneline --grep="^feat\|^fix\|^perf\|^refactor" --perl-regexp)
          else
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --perl-regexp | head -20)
          fi
          
          CHANGELOG="## üöÄ Release v${{ steps.version.outputs.new_version }}\n\n"
          
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            CHANGELOG="${CHANGELOG}${{ github.event.inputs.release_notes }}\n\n"
          fi
          
          if [ -n "$COMMITS" ]; then
            CHANGELOG="${CHANGELOG}### üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º
            FEATURES=$(echo "$COMMITS" | grep "feat:" || true)
            FIXES=$(echo "$COMMITS" | grep "fix:" || true)
            PERF=$(echo "$COMMITS" | grep "perf:" || true)
            REFACTOR=$(echo "$COMMITS" | grep "refactor:" || true)
            
            if [ -n "$FEATURES" ]; then
              CHANGELOG="${CHANGELOG}#### ‚ú® –ù–æ–≤—ã–µ —Ñ–∏—á–∏:\n"
              echo "$FEATURES" | while read -r line; do
                MSG=$(echo "$line" | sed 's/^[a-f0-9]* //')
                CHANGELOG="${CHANGELOG}- $MSG\n"
              done
              CHANGELOG="${CHANGELOG}\n"
            fi
            
            if [ -n "$FIXES" ]; then
              CHANGELOG="${CHANGELOG}#### üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
              echo "$FIXES" | while read -r line; do
                MSG=$(echo "$line" | sed 's/^[a-f0-9]* //')
                CHANGELOG="${CHANGELOG}- $MSG\n"
              done
              CHANGELOG="${CHANGELOG}\n"
            fi
            
            if [ -n "$PERF" ]; then
              CHANGELOG="${CHANGELOG}#### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n"
              echo "$PERF" | while read -r line; do
                MSG=$(echo "$line" | sed 's/^[a-f0-9]* //')
                CHANGELOG="${CHANGELOG}- $MSG\n"
              done
              CHANGELOG="${CHANGELOG}\n"
            fi
            
            if [ -n "$REFACTOR" ]; then
              CHANGELOG="${CHANGELOG}#### üîß –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥:\n"
              echo "$REFACTOR" | while read -r line; do
                MSG=$(echo "$line" | sed 's/^[a-f0-9]* //')
                CHANGELOG="${CHANGELOG}- $MSG\n"
              done
              CHANGELOG="${CHANGELOG}\n"
            fi
          else
            CHANGELOG="${CHANGELOG}### üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è\n\n"
          fi
          
          CHANGELOG="${CHANGELOG}---\n\n"
          CHANGELOG="${CHANGELOG}**–¢–∏–ø —Ä–µ–ª–∏–∑–∞:** ${{ steps.version.outputs.version_type }}\n"
          CHANGELOG="${CHANGELOG}**–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è:** ${{ steps.version.outputs.current_version }}\n"
          CHANGELOG="${CHANGELOG}**–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:** ${{ steps.version.outputs.new_version }}\n\n"
          CHANGELOG="${CHANGELOG}> ‚ö†Ô∏è **–≠—Ç–æ draft —Ä–µ–ª–∏–∑.** –û–Ω —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ –º–µ—Ä–∂–∞ release –≤–µ—Ç–∫–∏ –≤ master."
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º changelog –≤ —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ PR –∏ Release
          echo -e "$CHANGELOG" > /tmp/changelog.md
          
          # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è GitHub Output
          CHANGELOG_ESCAPED=$(echo -e "$CHANGELOG" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT

      - name: Create Draft GitHub Release
        run: |
          echo "üìù –°–æ–∑–¥–∞–µ–º draft GitHub Release..."
          
          gh release create "v${{ steps.version.outputs.new_version }}" \
            --title "üöÄ Release v${{ steps.version.outputs.new_version }}" \
            --notes-file /tmp/changelog.md \
            --draft \
            --prerelease=${{ contains(steps.version.outputs.new_version, '-') }}
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Pull Request
        run: |
          echo "üîÑ –°–æ–∑–¥–∞–µ–º Pull Request..."
          
          # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π changelog –¥–ª—è PR
          PR_CHANGELOG="## üöÄ Release v${{ steps.version.outputs.new_version }}\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}### üéØ –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–ª–∏–∑:\n\n"
          
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            PR_CHANGELOG="${PR_CHANGELOG}${{ github.event.inputs.release_notes }}\n\n"
          fi
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ –∏ draft release
          PR_CHANGELOG="${PR_CHANGELOG}### üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞:\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}- ‚úÖ **–¢–µ–≥ —Å–æ–∑–¥–∞–Ω:** \`v${{ steps.version.outputs.new_version }}\`\n"
          PR_CHANGELOG="${PR_CHANGELOG}- ‚úÖ **Draft Release —Å–æ–∑–¥–∞–Ω:** [v${{ steps.version.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }})\n"
          PR_CHANGELOG="${PR_CHANGELOG}- ‚úÖ **–í–µ—Ä—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã** –≤–æ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–∞—Ö\n\n"
          
          PR_CHANGELOG="${PR_CHANGELOG}### üöÄ –ü–æ—Å–ª–µ –º–µ—Ä–∂–∞:\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}- üîÑ **Deploy workflow** –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
          PR_CHANGELOG="${PR_CHANGELOG}- üì¶ **–ü–∞–∫–µ—Ç—ã** –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ npm\n"
          PR_CHANGELOG="${PR_CHANGELOG}- üéâ **Draft Release** —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º —Ä–µ–ª–∏–∑–æ–º\n\n"
          
          PR_CHANGELOG="${PR_CHANGELOG}---\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}**–¢–∏–ø —Ä–µ–ª–∏–∑–∞:** ${{ steps.version.outputs.version_type }}\n"
          PR_CHANGELOG="${PR_CHANGELOG}**–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è:** ${{ steps.version.outputs.current_version }}\n"
          PR_CHANGELOG="${PR_CHANGELOG}**–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:** ${{ steps.version.outputs.new_version }}"
          
          echo -e "$PR_CHANGELOG" > /tmp/pr_changelog.md
          
          gh pr create \
            --title "üöÄ Release v${{ steps.version.outputs.new_version }}" \
            --body-file /tmp/pr_changelog.md \
            --label "release" \
            --label "${{ steps.version.outputs.version_type }}" \
            --assignee "${{ github.actor }}"
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        run: |
          echo "## üéâ Release –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã –ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:" >> $GITHUB_STEP_SUMMARY
          echo "- **üè∑Ô∏è –¢–µ–≥:** \`v${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üìù Draft Release:** [v${{ steps.version.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- **üåø Release –≤–µ—Ç–∫–∞:** \`release/v${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üîÑ Pull Request:** –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ –î–µ—Ç–∞–ª–∏ —Ä–µ–ª–∏–∑–∞:" >> $GITHUB_STEP_SUMMARY
          echo "- **–í–µ—Ä—Å–∏—è:** \`${{ steps.version.outputs.current_version }}\` ‚Üí \`${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **–¢–∏–ø:** \`${{ steps.version.outputs.version_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" >> $GITHUB_STEP_SUMMARY
          echo "1. üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π Pull Request" >> $GITHUB_STEP_SUMMARY
          echo "2. ‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è CI –ø—Ä–æ–≤–µ—Ä–æ–∫" >> $GITHUB_STEP_SUMMARY
          echo "3. üîç –°–¥–µ–ª–∞–π—Ç–µ code review" >> $GITHUB_STEP_SUMMARY
          echo "4. ‚úÖ –°–º–µ—Ä–∂–∏—Ç–µ PR –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è" >> $GITHUB_STEP_SUMMARY
          echo "5. üéâ Draft Release –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º!" >> $GITHUB_STEP_SUMMARY 
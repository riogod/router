name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Release type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto      # Automatically determine from commits
          - patch     # 0.0.1 → 0.0.2 (bugfixes)
          - minor     # 0.1.0 → 0.2.0 (new features)
          - major     # 1.0.0 → 2.0.0 (breaking changes)
          - prerelease # 0.1.0 → 0.1.1-beta.1
      custom_version:
        description: 'Custom version (optional, e.g.: 1.0.0-beta.1)'
        required: false
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Нужно для анализа коммитов
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Determine new version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # If custom version is specified
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_type=custom" >> $GITHUB_OUTPUT
            echo "🎯 Using custom version: $NEW_VERSION"
            exit 0
          fi
          
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          # Automatic release type determination
          if [ "$VERSION_TYPE" = "auto" ]; then
            echo "🔍 Analyzing commits to determine release type..."
            
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              COMMITS=$(git log $LAST_TAG..HEAD --oneline)
              echo "Commits since $LAST_TAG:"
              echo "$COMMITS"
            else
              COMMITS=$(git log --oneline)
              echo "All commits (no previous tags):"
              echo "$COMMITS"
            fi
            
            # Determine release type by conventional commits
            if echo "$COMMITS" | grep -qE "^[a-f0-9]+ [^:]+!:"; then
              VERSION_TYPE="major"
              echo "🚨 Found breaking changes → MAJOR release"
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ feat(\(.+\))?:"; then
              VERSION_TYPE="minor"
              echo "✨ Found new features → MINOR release"
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ fix(\(.+\))?:"; then
              VERSION_TYPE="patch"
              echo "🐛 Found fixes → PATCH release"
            else
              VERSION_TYPE="patch"
              echo "📝 Other changes → PATCH release (default)"
            fi
          fi
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          
          # Calculate new version
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # Remove possible suffixes from patch version
          patch=$(echo "$patch" | sed 's/-.*//')
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
            prerelease)
              # For prerelease add suffix
              if [[ "$CURRENT_VERSION" == *"-"* ]]; then
                # Already has suffix, increment number
                BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
                SUFFIX=$(echo "$CURRENT_VERSION" | cut -d'-' -f2)
                if [[ "$SUFFIX" == *"."* ]]; then
                  PREFIX=$(echo "$SUFFIX" | cut -d'.' -f1)
                  NUMBER=$(echo "$SUFFIX" | cut -d'.' -f2)
                  NEW_VERSION="$BASE_VERSION-$PREFIX.$((NUMBER + 1))"
                else
                  NEW_VERSION="$BASE_VERSION-$SUFFIX.1"
                fi
              else
                NEW_VERSION="$major.$minor.$((patch + 1))-beta.1"
              fi
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🎉 New version: $CURRENT_VERSION → $NEW_VERSION ($VERSION_TYPE)"

      - name: Create and push tag
        run: |
          TAG_NAME="v${{ steps.version.outputs.new_version }}"
          echo "🏷️ Creating tag: $TAG_NAME"
          
          # Create annotated tag
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          
          # Push tag
          git push origin "$TAG_NAME"
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
      - name: Create release branch
        run: |
          BRANCH_NAME="release/v${{ steps.version.outputs.new_version }}"
          echo "📝 Creating branch: $BRANCH_NAME"
          
          git checkout -b "$BRANCH_NAME"
          
          # Update versions in all packages
          echo "📦 Updating package versions..."
          node ./scripts/update-package-versions.js ${{ steps.version.outputs.new_version }}
          
          # Update CHANGELOG.md
          echo "📋 Updating CHANGELOG.md..."
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            node scripts/generate-changelog.js ${{ steps.version.outputs.new_version }} $LAST_TAG
          else
            node scripts/generate-changelog.js ${{ steps.version.outputs.new_version }}
          fi
          
          # Create commit with version updates and changelog
          git add .
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.new_version }} and update changelog"
          
          # Push branch
          git push origin "$BRANCH_NAME"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "📋 Generating changelog..."
          
          # Get last tag for comparison
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog using our advanced script
          # Include commits from current branch (release branch) up to HEAD
          if [ -n "$LAST_TAG" ]; then
            echo "📊 Generating changelog from $LAST_TAG to current HEAD..."
            CHANGELOG_CONTENT=$(node scripts/generate-changelog.js ${{ steps.version.outputs.new_version }} $LAST_TAG --output=/tmp/temp_changelog.md --to-tag=HEAD)
          else
            echo "📊 Generating changelog for first release..."
            CHANGELOG_CONTENT=$(node scripts/generate-changelog.js ${{ steps.version.outputs.new_version }} --output=/tmp/temp_changelog.md --to-tag=HEAD)
          fi
          
          # Read the generated changelog content
          if [ -f "/tmp/temp_changelog.md" ]; then
            CHANGELOG_SECTION=$(cat /tmp/temp_changelog.md)
          else
            CHANGELOG_SECTION="### 📝 Other Changes\n\n- Updates and improvements"
          fi
          
          # Add custom release notes if provided
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_NOTES="## 🚀 Release v${{ steps.version.outputs.new_version }}\n\n"
            RELEASE_NOTES="${RELEASE_NOTES}${{ github.event.inputs.release_notes }}\n\n"
            RELEASE_NOTES="${RELEASE_NOTES}${CHANGELOG_SECTION}"
          else
            RELEASE_NOTES="$CHANGELOG_SECTION"
          fi
          
          # Add release metadata and draft warning
          RELEASE_NOTES="${RELEASE_NOTES}\n\n---\n\n"
          RELEASE_NOTES="${RELEASE_NOTES}**Release type:** ${{ steps.version.outputs.version_type }}\n"
          RELEASE_NOTES="${RELEASE_NOTES}**Previous version:** ${{ steps.version.outputs.current_version }}\n"
          RELEASE_NOTES="${RELEASE_NOTES}**New version:** ${{ steps.version.outputs.new_version }}\n\n"
          RELEASE_NOTES="${RELEASE_NOTES}> ⚠️ **This is a draft release.** It will become full after merging the release branch into master."
          
          # Save changelog to file for use in PR and Release
          echo -e "$RELEASE_NOTES" > /tmp/changelog.md
          
          # Escape for GitHub Output
          CHANGELOG_ESCAPED=$(echo -e "$RELEASE_NOTES" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT
          
          echo "✅ Advanced changelog generated successfully"

      - name: Create Draft GitHub Release
        run: |
          echo "📝 Creating draft GitHub Release..."
          
          gh release create "v${{ steps.version.outputs.new_version }}" \
            --title "🚀 Release v${{ steps.version.outputs.new_version }}" \
            --notes-file /tmp/changelog.md \
            --draft \
            --prerelease=${{ contains(steps.version.outputs.new_version, '-') }}
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Pull Request
        run: |
          echo "🔄 Creating Pull Request..."
          
          # Create special changelog for PR
          PR_CHANGELOG="## 🚀 Release v${{ steps.version.outputs.new_version }}\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}### 🎯 What is included in the release:\n\n"
          
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            PR_CHANGELOG="${PR_CHANGELOG}${{ github.event.inputs.release_notes }}\n\n"
          fi
          
          # Add tag and draft release information
          PR_CHANGELOG="${PR_CHANGELOG}### 📋 Release preparation:\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}- ✅ **Tag created:** \`v${{ steps.version.outputs.new_version }}\`\n"
          PR_CHANGELOG="${PR_CHANGELOG}- ✅ **Draft Release created:** [v${{ steps.version.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }})\n"
          PR_CHANGELOG="${PR_CHANGELOG}- ✅ **Versions updated** in all packages\n\n"
          
          PR_CHANGELOG="${PR_CHANGELOG}### 🚀 After merging:\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}- 🔄 **Deploy workflow** will start automatically\n"
          PR_CHANGELOG="${PR_CHANGELOG}- 📦 **Packages** will be published to npm\n"
          PR_CHANGELOG="${PR_CHANGELOG}- 🎉 **Draft Release** will become full release\n\n"
          
          PR_CHANGELOG="${PR_CHANGELOG}---\n\n"
          PR_CHANGELOG="${PR_CHANGELOG}**Release type:** ${{ steps.version.outputs.version_type }}\n"
          PR_CHANGELOG="${PR_CHANGELOG}**Previous version:** ${{ steps.version.outputs.current_version }}\n"
          PR_CHANGELOG="${PR_CHANGELOG}**New version:** ${{ steps.version.outputs.new_version }}"
          
          echo -e "$PR_CHANGELOG" > /tmp/pr_changelog.md
          
          gh pr create \
            --title "🚀 Release v${{ steps.version.outputs.new_version }}" \
            --body-file /tmp/pr_changelog.md \
            --label "release" \
            --assignee "${{ github.actor }}"
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        run: |
          echo "## 🎉 Release prepared!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 What is created:" >> $GITHUB_STEP_SUMMARY
          echo "- **🏷️ Tag:** \`v${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **📝 Draft Release:** [v${{ steps.version.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- **🌿 Release branch:** \`release/v${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **🔄 Pull Request:** Created automatically" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Release details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \`${{ steps.version.outputs.current_version }}\` → \`${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** \`${{ steps.version.outputs.version_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. 👀 Check the created Pull Request" >> $GITHUB_STEP_SUMMARY
          echo "2. ⏳ Wait for CI checks to pass" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔍 Make code review" >> $GITHUB_STEP_SUMMARY
          echo "4. ✅ Merge PR for automatic deployment" >> $GITHUB_STEP_SUMMARY
          echo "5. 🎉 Draft Release automatically becomes full!" >> $GITHUB_STEP_SUMMARY 
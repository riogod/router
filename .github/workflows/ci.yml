name: CI

on:
  # Pull requests to master and release branches
  pull_request:
    branches: 
      - master
      - 'release/v*'
  
  # Push to master (release branches are handled separately)
  push:
    branches: 
      - master

  # Manual trigger option
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Determine which files changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'
              - 'package.json'
              - 'package-lock.json'
              - 'jest.config.js'
              - 'tsconfig.base.json'
              - 'tsconfig.typecheck.json'
              - 'rollup.config.js'
              - 'scripts/check-node-compatibility.js'
            docs:
              - '**/*.md'
              - 'examples/**'

  # Main tests
  test:
    needs: changes
    if: needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x, 22.x]
        
    name: Test (Node ${{ matrix.node-version }})
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Debug Node version
        run: |
          echo "Matrix node-version: ${{ matrix.node-version }}"
          echo "Actual Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "TypeScript version: $(npx tsc --version)"
          echo "Working directory: $(pwd)"
          echo "Available TypeScript configs:"
          ls -la tsconfig*.json || echo "No tsconfig files found"
        
      - name: Run tests
        run: npm test
        
      - name: Run linting
        run: npm run lint
        
      - name: Check TypeScript compilation
        run: npm run check-compatibility

  # Build check
  build:
    needs: changes
    if: needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            packages/*/lib/
          retention-days: 7

  # Security check
  security:
    needs: changes
    if: needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true
        
      - name: Check for known vulnerabilities
        run: npx audit-ci --config .audit-ci.json
        continue-on-error: true

  # Coverage check (only for PR)
  coverage:
    needs: changes
    if: github.event_name == 'pull_request' && needs.changes.outputs.packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: npm test -- --coverage --coverageReporters=lcov
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Final check
  ci-success:
    needs: [changes, test, build, security]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Changes output: ${{ needs.changes.outputs.packages }}"
          echo "Test result: ${{ needs.test.result }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Security result: ${{ needs.security.result }}"
          
          # If packages didn't change, all jobs should be skipped
          if [[ "${{ needs.changes.outputs.packages }}" == "false" ]]; then
            echo "No package changes detected - all jobs skipped as expected"
            exit 0
          fi
          
          # If packages changed, check results
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          
          echo "All jobs passed successfully"

  # Notifications (optional)
  notify:
    needs: [changes, test, build, security]
    if: always() && needs.changes.outputs.packages == 'true' && (needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure') && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå CI checks failed. Please review the errors and fix them before merging.'
            }) 